package main

import (
  "os"
  "fmt"
  "mapreduce"
  "strings"
  "strconv"
  "unicode"
  "container/list"
)

// our simplified version of MapReduce does not supply a
// key to the Map function, as in the paper; only a value,
// which is a part of the input file content. the return
// value should be a list of key/value pairs, each represented
// by a mapreduce.KeyValue.

func Map(value string) *list.List {
  f := func(c rune) bool {
    return !unicode.IsLetter(c)
  }
  values := strings.FieldsFunc(value, f)

  m := make(map[string]int)

  for _, v := range values {
    m[v] = m[v] + 1
  }

  l := list.New()

  for k, v := range m {
    vStr := strconv.Itoa(v)
    l.PushBack(interface{}(mapreduce.KeyValue{k, vStr}))
  }
  //l.PushBack(interface{}(mapreduce.KeyValue{"A", "1"}))

  return l
}

// called once for each key generated by Map, with a list
// of that key's string value. should return a single
// output value for that key.
func Reduce(key string, values *list.List) string {

  sum := 0
  for e := values.Front(); e != nil; e = e.Next() {
    vInt, _ := strconv.Atoi(e.Value.(string))
    sum += vInt
  }

  return strconv.Itoa(sum)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master x.txt sequential)
// 2) Master (e.g., go run wc.go master x.txt localhost:7777)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) != 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		if os.Args[3] == "sequential" {
			mapreduce.RunSingle(5, 3, os.Args[2], Map, Reduce)
		} else {
			mr := mapreduce.MakeMapReduce(5, 3, os.Args[2], os.Args[3])
			// Wait until MR is done
			<-mr.DoneChannel
		}
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], Map, Reduce, 100)
	}
}
